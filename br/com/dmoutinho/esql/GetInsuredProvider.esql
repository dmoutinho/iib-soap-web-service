BROKER SCHEMA br.com.dmoutinho.esql

CREATE COMPUTE MODULE GetInsuredProvider
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		-- Test Timeout	
		--DECLARE returnValue BOOLEAN;
		--SET returnValue = SLEEP(30000);

		DECLARE code INTEGER;
		DECLARE message CHARACTER;
		
		CALL Validate(code,message);
		
		IF code IS NULL OR NOT(code = CD_VALIDATION_ERROR) THEN
			CALL FindInsured(code,message);
		END IF;

		SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.return.code = code;
		SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.return.message = message;

		RETURN TRUE;
	
	END;

	CREATE PROCEDURE Validate(OUT code INTEGER, OUT message CHARACTER)
	BEGIN
		IF InputRoot.SOAP.Body.ns1:getInsuredRequest.idDocument is NULL THEN
			SET code = CD_VALIDATION_ERROR;
			SET message = 'Set idDocument.';
		END IF;
	END;

	CREATE PROCEDURE FindInsured(OUT code INTEGER, OUT message CHARACTER)
	BEGIN
		DECLARE idDocument CHARACTER InputRoot.SOAP.Body.ns1:getInsuredRequest.idDocument;
		IF idDocument = '69954447792' THEN
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.id = '1';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.name = 'Friedrich Wilhelm Nietzsche';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.birth = '1900-08-25';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.idDocument = '69954447792';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.type = '1';
			SET code = CD_SUCCESS;
		ELSEIF idDocument = '26608553668' THEN
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.id = '2';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.name = 'Eduardo Hughes Galeano';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.birth = '1940-09-03';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.idDocument = '26608553668';
			SET OutputRoot.SOAP.Body.ns1:getInsuredResponse.insured.type = '1';
			SET code = CD_SUCCESS;
		ELSE
			SET code = CD_NOT_FOUND;
			SET message = MSG_NOT_FOUND;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
END MODULE;